SELECT * FROM users 
JOIN friendships ON users.ID=friendships.user_ID
LEFT JOIN users as user2 ON	user2.ID=friendships.friend_ID

Query: Have user 1 be friends with user 2, 4 and 6
Query: Have user 2 be friends with user 1, 3 and 5
Query: Have user 3 be friends with user 2 and 5
Query: Have user 4 be friends with user 3
Query: Have user 5 be friends with user 1 and 6
Query: Have user 6 be friends with user 2 and 3

INSERT INTO friendships(user_ID,friend_ID)VALUES(1,2),(1,4),(1,6),(2,1),(2,3),(2,5),(3,2),(3,5),(4,3),(5,1),(5,6),(6,2),(6,3)


Query: Display the relationships created as shown in the table in the above image

SELECT users.first_name, users.last_name,user2.first_name as friend_first_name, user2.last_name as friend_last_name from users
JOIN friendships ON users.ID=friendships.user_ID
LEFT JOIN users as user2 ON	user2.ID=friendships.friend_ID


	
NINJA Query: Return all users who are friends with the first user, make sure their names are displayed in results.

SELECT users.first_name, users.last_name,user2.first_name as friend_first_name, user2.last_name as friend_last_name from users
JOIN friendships ON users.ID=friendships.user_ID
LEFT JOIN users as user2 ON	user2.ID=friendships.friend_ID
WHERE users.ID=1

NINJA Query: Return the count of all friendships

SELECT user_ID, first_name,count(friendships.ID)as count FROM friendships
JOIN users on users.ID=friendships.user_ID
GROUP BY user_ID	
HAVING count(friendships.ID)=3


NINJA Query: Return the friends of the third user in alphabetical order

SELECT user_ID, users2.first_name, users2.last_name FROM friendships
JOIN users ON users.ID=friendships.user_ID
LEFT JOIN users AS users2 ON users2.ID=friend_ID
WHERE user_ID=3
ORDER BY first_name;

